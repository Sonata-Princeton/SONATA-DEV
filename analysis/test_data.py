import pickle
fname = 'data/hypothesis_graph_2_2017-04-11 02:32:08.513236.pickle'
fname = 'data/hypothesis_graph_6_2017-04-11 02:55:06.032332.pickle'
fname = 'data/hypothesis_graph_6_2017-04-12 12:36:50.995811.pickle'
fname = 'data/hypothesis_graph_6_2017-04-12 15:30:31.466226.pickle'
fname = 'data/hypothesis_graph_2_threshold_99.99_5min_0_2017-04-18 23:58:49.831630.pickle'
fname = 'data/hypothesis_graph_2_threshold_99.9_5min_0_2017-04-19 00:47:08.188306.pickle'
fname= 'data/hypothesis_graph_2_threshold_99.999_5min_0_2017-04-19 01:34:59.979759.pickle'

with open(fname,'r') as f:
    data = pickle.load(f)
    print len(data.keys())
    for ts in data.keys()[:20]:
        v,e = data[ts]
        print e[((0, 0, 0), (32, 4, 1))], e[((0, 0, 0), (4, 4, 1))], e[((4, 0, 1), (32, 4, 2))]
        print e[((0, 0, 0), (16, 4, 1))], e[((16, 0, 1), (32, 4, 2))]
        break

# # fname = 'data/counts_2_2017-04-11 02:28:02.230536.pickle'
# # with open(fname,'r') as f:
# #     data = pickle.load(f)
# #     print data[2][(0,4)]
#
# operational_alphas = {(4471, 73171): 0.00048828125, (895, 58537): 0.875, (4024, 146341): 0.99951171875, (4471, 131707): 0.99951171875, (3130, 117073): 0.99951171875, (1342, 73171): 0.99951171875, (4471, 43903): 0.00048828125, (1342, 131707): 0.99951171875, (1342, 14635): -1, (4024, 73171): 0.99951171875, (4471, 146341): 0.99951171875, (2683, 131707): 0.99951171875, (2236, 14635): -1, (1789, 73171): 0.99951171875, (4024, 131707): 0.99951171875, (448, 102439): 0.99951171875, (448, 117073): 0.99951171875, (3130, 146341): 0.99951171875, (2683, 117073): 0.99951171875, (2236, 1): -1, (1, 58537): -1, (3577, 146341): 0.99951171875, (1342, 1): -1, (895, 43903): 0.375, (448, 58537): 0.75, (4024, 58537): 0.96875, (2236, 43903): 0.5, (1789, 102439): 0.99951171875, (1342, 29269): -1, (3577, 43903): 0.5, (2683, 146341): 0.99951171875, (1, 117073): -1, (1342, 87805): 0.99951171875, (2236, 29269): -1, (1789, 1): -1, (448, 43903): 0.24609375, (3130, 73171): 0.99951171875, (1789, 131707): 0.99951171875, (3130, 131707): 0.99951171875, (895, 102439): 0.99951171875, (4024, 117073): 0.99951171875, (4471, 14635): 0.00048828125, (2236, 58537): 0.9375, (1789, 29269): -1, (1, 1): -1, (4471, 117073): 0.99951171875, (1, 73171): -1, (448, 146341): 0.99951171875, (1342, 146341): 0.99951171875, (3130, 102439): 0.99951171875, (895, 29269): -1, (1342, 58537): 0.875, (2236, 73171): 0.99951171875, (895, 87805): 0.99951171875, (3577, 117073): 0.99951171875, (3130, 1): -1, (895, 14635): -1, (2236, 87805): 0.99951171875, (1789, 58537): 0.875, (1, 131707): -1, (3130, 58537): 0.9375, (2683, 73171): 0.99951171875, (1, 146341): -1, (3577, 14635): -1, (1342, 43903): 0.4921875, (2683, 14635): -1, (2683, 43903): 0.5, (4024, 14635): -1, (448, 87805): 0.99951171875, (2236, 102439): 0.99951171875, (4024, 43903): 0.5, (3130, 29269): -1, (2683, 1): -1, (448, 29269): -1, (1789, 87805): 0.99951171875, (2683, 29269): -1, (895, 73171): 0.99951171875, (3130, 87805): 0.99951171875, (895, 146341): 0.99951171875, (3577, 102439): 0.99951171875, (4471, 58537): 0.00048828125, (895, 131707): 0.99951171875, (2236, 131707): 0.99951171875, (4471, 1): 0.00048828125, (1, 87805): -1, (1342, 102439): 0.99951171875, (1, 29269): -1, (3577, 73171): 0.99951171875, (2236, 117073): 0.99951171875, (448, 1): -1, (4471, 87805): 0.00048828125, (3577, 87805): 0.99951171875, (1789, 14635): -1, (448, 14635): -1, (4471, 29269): 0.00048828125, (3130, 14635): -1, (1, 102439): -1, (4024, 1): -1, (2683, 58537): 0.9375, (4024, 29269): -1, (4471, 102439): 0.99951171875, (2683, 87805): 0.99951171875, (2236, 146341): 0.99951171875, (1789, 117073): 0.99951171875, (448, 131707): 0.99951171875, (1, 14635): -1, (4024, 87805): 0.99951171875, (4024, 102439): 0.99951171875, (448, 73171): 0.99951171875, (1789, 43903): 0.5, (1342, 117073): 0.99951171875, (895, 117073): 0.99951171875, (3130, 43903): 0.5, (2683, 102439): 0.99951171875, (3577, 131707): 0.99951171875, (1789, 146341): 0.99951171875, (3577, 1): -1, (3577, 29269): -1, (895, 1): -1, (3577, 58537): 0.9375, (1, 43903): -1}
# unique_plans = {'(16, 4, 1),(28, 4, 2),(32, 4, 3)': {(4024, 58537): 0.96875, (895, 58537): 0.875, (448, 58537): 0.75, (1789, 58537): 0.875, (1342, 58537): 0.875, (2683, 58537): 0.9375, (2236, 58537): 0.9375, (3577, 58537): 0.9375, (3130, 58537): 0.9375}, '(12, 4, 1),(16, 4, 2),(20, 4, 3),(28, 4, 4),(32, 4, 5)': {(1342, 14635): 0.48291015625, (2236, 43903): 0.5, (3577, 14635): 0.71337890625, (895, 14635): 0.38330078125, (3577, 43903): 0.5, (2683, 29269): 0.48291015625, (1789, 29269): 0.38330078125, (895, 43903): 0.375, (3130, 43903): 0.5, (1789, 43903): 0.5, (1342, 43903): 0.4921875, (2683, 14635): 0.65087890625, (448, 43903): 0.24609375, (2683, 43903): 0.5, (4024, 14635): 0.73681640625, (895, 29269): 0.23681640625, (1, 1): 0.9375, (4024, 43903): 0.5}, '(28, 4, 1),(32, 4, 2)': {}, '(16, 4, 1),(20, 4, 2),(28, 4, 3),(32, 4, 4)': {}, '(32, 0, 1)': {(4471, 73171): 0.00048828125, (4471, 43903): 0.00048828125, (1342, 29269): 0.31787109375, (4471, 87805): 0.00048828125, (3130, 29269): 0.52099609375, (1789, 14635): 0.55419921875, (2236, 29269): 0.43701171875, (1789, 1): 0.99951171875, (448, 14635): 0.23779296875, (4471, 29269): 0.00048828125, (3130, 14635): 0.68505859375, (4024, 1): 0.99951171875, (4024, 29269): 0.58349609375, (448, 1): 0.99951171875, (1342, 1): 0.99951171875, (2683, 1): 0.99951171875, (448, 29269): 0.13427734375, (3130, 1): 0.99951171875, (2236, 14635): 0.60888671875, (4471, 14635): 0.00048828125, (4471, 58537): 0.00048828125, (2236, 1): 0.99951171875, (3577, 1): 0.99951171875, (4471, 1): 0.00048828125, (3577, 29269): 0.55419921875, (895, 1): 0.99951171875}, '(32, 4, 1)': {(3577, 87805): 0.99951171875, (895, 87805): 0.99951171875, (3577, 117073): 0.99951171875, (2236, 87805): 0.99951171875, (3577, 146341): 0.99951171875, (1, 131707): 0.99951171875, (1, 146341): 0.99951171875, (1, 73171): 0.99951171875, (3130, 117073): 0.99951171875, (1342, 73171): 0.99951171875, (2236, 102439): 0.99951171875, (448, 87805): 0.99951171875, (1342, 131707): 0.99951171875, (4024, 73171): 0.99951171875, (4471, 146341): 0.99951171875, (1789, 87805): 0.99951171875, (4024, 102439): 0.99951171875, (1789, 73171): 0.99951171875, (895, 73171): 0.99951171875, (3130, 87805): 0.99951171875, (895, 146341): 0.99951171875, (2683, 131707): 0.99951171875, (448, 102439): 0.99951171875, (448, 117073): 0.99951171875, (895, 131707): 0.99951171875, (3130, 146341): 0.99951171875, (2683, 117073): 0.99951171875, (1, 58537): 0.5, (2236, 131707): 0.99951171875, (2683, 146341): 0.99951171875, (1, 87805): 0.99951171875, (1789, 131707): 0.99951171875, (1342, 102439): 0.99951171875, (1, 29269): 0.5, (1789, 102439): 0.99951171875, (2236, 117073): 0.99951171875, (4471, 117073): 0.99951171875, (3577, 73171): 0.99951171875, (1, 117073): 0.99951171875, (1342, 87805): 0.99951171875, (3577, 102439): 0.99951171875, (1342, 117073): 0.99951171875, (3577, 131707): 0.99951171875, (1, 102439): 0.99951171875, (3130, 131707): 0.99951171875, (1789, 146341): 0.99951171875, (3130, 73171): 0.99951171875, (4471, 102439): 0.99951171875, (2683, 87805): 0.99951171875, (2236, 146341): 0.99951171875, (1789, 117073): 0.99951171875, (448, 131707): 0.99951171875, (4024, 87805): 0.99951171875, (895, 102439): 0.99951171875, (4024, 117073): 0.99951171875, (448, 73171): 0.99951171875, (4024, 146341): 0.99951171875, (2683, 73171): 0.99951171875, (895, 117073): 0.99951171875, (2683, 102439): 0.99951171875, (448, 146341): 0.99951171875, (1342, 146341): 0.99951171875, (3130, 102439): 0.99951171875, (4471, 131707): 0.99951171875, (1, 14635): 0.5, (4024, 131707): 0.99951171875, (2236, 73171): 0.99951171875, (1, 43903): 0.5}}
# data = {}
# Ns=[1, 448, 895, 1342, 1789, 2236, 2683, 3130, 3577, 4024, 4471]
# Bs=[1, 14635, 29269, 43903, 58537, 73171, 87805, 102439, 117073, 131707, 146341]
# data[5] = (Ns,Bs, operational_alphas, unique_plans)
# fname = 'data/alpha_tuning_dump_6_2017-04-12 15:54:52.662756.pickle'
#
# print "Dumping data to", fname
# with open(fname, 'w') as f:
#     pickle.dump(data, f)
